AWSTemplateFormatVersion: "2010-09-09"
Description: A set of fargate tasks
Parameters:
  PublicSubnetA:
    Type: String
    Default: Id of Public Subnet
    Description: Enter the Public Subnet here
  PublicSubnetB: # Required because ALB requires two public subnets
    Type: String
    Default: Id of PublicSubnet
    Description: A second public subnet name for the Application Load Balancer
  SelectedVPC:
    Type: String
    Default: Id of VPC goes here
    Description: The VPC to be deployed to. Will have security groups added to it.
  # Examples of Private variables to be injected into the stack. Most likely references to SSM
  PrivateVariableA:
    Type: String
    Default: Place the reference to the secret key here
    Description: This is a reference to a secret key store in ssm
  SSMpath:
    Type: String
    Default: place the path to your parameter's SSM here
    Description: This is for SSM path
  KMSkey:
    Type: String
    Default: This should be the ARN of the key used to decrypt secure strings
    Description: This is another ARN path
  # Should we prefer to get Variables via task role, that task role can be specified here


Resources:
  # Subnets for the Default VPC
  LoadSecurityGroup:
    DeletionPolicy: Delete
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: Load Balancer for Fargate Application
      GroupDescription: Allows all traffic too and from Load Balancer
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" # Cidr entire internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0" #Cidr entire internet
      SecurityGroupEgress:
           - IpProtocol: "-1"
             CidrIp: "0.0.0.0/0"
             FromPort: 0
             ToPort: 1023
  FargateSecurityGroup:
    DeletionPolicy: Delete
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: Controls traffic to and From Fargate instances
      GroupDescription: Allows Traffic from Public Subnet. Allows all outbound traffic
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" # All of the internet because now tasks are in a public subnet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0" # all the internet because tasks now in a public subnet
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0" # Allows access to the internet
          FromPort: 0
          ToPort: 1024
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Simple-Fargate
      CapacityProviders:
           - FARGATE
  FargateAuthService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - AuthListenerRule
    Properties:
      ServiceName: Fargate-Auth-Service
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref FargateAuthTask
      LoadBalancers:
          - ContainerName: AuthTest
            ContainerPort: 80
            TargetGroupArn: !Ref AuthTargetGroup
      NetworkConfiguration:
           AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                   - !Ref FargateSecurityGroup
              Subnets:
                   - !Ref PublicSubnetA
                   - !Ref PublicSubnetB
                
  FargateReflectService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - ReflectListenerRule
    Properties:
      ServiceName: Fargate-Reflect-Service
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref FargateReflectTask
      LoadBalancers:
          - ContainerName: ReflectTask
            ContainerPort: 80
            TargetGroupArn: !Ref ReflectTargetGroup
      NetworkConfiguration:
           AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                   - !Ref FargateSecurityGroup
              Subnets:
                   - !Ref PublicSubnetA
                   - !Ref PublicSubnetB
  FargateAuthTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
        Tags:
          - Key: test
            Value: True
        NetworkMode: awsvpc
        RequiresCompatibilities:
             - FARGATE
        Memory: 512
        Cpu: 256
        PidMode: task
        ContainerDefinitions:
         - Image: docker.io/gonzaga626/auth:latest
           Name: AuthTest
           Environment:
            - Name: API_PORT
              Value: 80
            - Name: TEST_VAR
              Value: Test variable successfully added.
           PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80
  ReflectTaskRole:
    Type: AWS::IAM::Role
    Properties:

         AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service: ecs-tasks.amazonaws.com
                  Action: 'sts:AssumeRole'
         Policies:
            - PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - 'kms:Decrypt'
                    Resource: !Ref KMSkey # could be further refined to specific keys.
                  - Effect: Allow
                    Action: 
                      - 'ssm:GetParameter'
                      - 'ssm:GetParameters'
                      - 'ssm:DescribeParameters'
                    Resource: !Ref SSMpath # Later, this can be made more granular with parameters.
              PolicyName: Fargate-read-params-policy-task
  
  ContainerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Write_to_cloud_logs
      AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service: ecs-tasks.amazonaws.com
                  Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17" 
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: !GetAtt LogGroup.Arn
          PolicyName: CloudLogger
        - PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action: 
                      - 'ssm:GetParamters'
                    Resource: "*" # Later, this can be made more granular with parameters.
          PolicyName: Fargate-read-params-container




  FargateReflectTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
        TaskRoleArn: !Ref ReflectTaskRole
        ExecutionRoleArn: !GetAtt ContainerRole.Arn # not sure why, but !Ref does not work here
        Tags:
          - Key: test
            Value: True
        NetworkMode: awsvpc
        RequiresCompatibilities:
             - FARGATE
        Memory: 512
        Cpu: 256
        PidMode: task
        ContainerDefinitions:
         - Image: docker.io/gonzaga626/reflect:latest
           Name: ReflectTask
           LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-region: 'us-west-2'
                  awslogs-group: !Ref LogGroup
                  awslogs-stream-prefix: simple-fargate
           Environment:
            - Name: API_PORT
              Value: 80
            - Name: TEST_VAR
              Value: Test variable successfully added.
            - Name: PRIVATE_VAR_A
              Value: !Ref PrivateVariableA
            - Name: PRIVATE_VAR_B
              Value: '{{resolve:ssm:mongo_url}}'
           PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80

  AuthTargetGroup:
    # DependsOn: !Ref AuthListenerRule
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15 # if no responce in 15 seconds, target is in a bad state
      HealthyThresholdCount: 2 # must succeed twice to be healthy
      UnhealthyThresholdCount: 3 #if fail three times is considered bad
      TargetType: ip
      VpcId: !Ref SelectedVPC
      Protocol: HTTP
      Port: 80
  ReflectTargetGroup:
    # DependsOn: !Ref ReflectListenerRule
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15 # if no responce in 15 seconds, target is in a bad state
      HealthyThresholdCount: 2 # must succeed twice to be healthy
      UnhealthyThresholdCount: 3 #if fail three times is considered bad
      TargetType: ip
      VpcId: !Ref SelectedVPC
      Protocol: HTTP
      Port: 80
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
           - !Ref PublicSubnetA
           - !Ref PublicSubnetB
      Name: Fargate-LoadBlalancer
      SecurityGroups:
           - !Ref LoadSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
           - Type: fixed-response
             FixedResponseConfig:
                  StatusCode: 403
                  ContentType: text/plain
                  MessageBody: Why you break my load balancer?
  AuthListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
         ListenerArn: !Ref ALBListener
         Actions:
            - Type: forward
              TargetGroupArn: !Ref AuthTargetGroup
         Priority: 100
         Conditions:
            - Field: path-pattern
              PathPatternConfig:
                Values:
                  - "/auth*"
  ReflectListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
         ListenerArn: !Ref ALBListener
         Actions:
            - Type: forward
              TargetGroupArn: !Ref ReflectTargetGroup
         Priority: 200
         Conditions:
            - Field: path-pattern
              PathPatternConfig:
                Values:
                  - "/api*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Simple-fargate-logs
