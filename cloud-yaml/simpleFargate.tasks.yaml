AWSTemplateFormatVersion: "2010-09-09"
Description: A set of fargate tasks
Parameters:
  PublicSubnet:
    Type: String
    Default: Id of Public Subnet
    Description: Enter the Public Subnet here
  PrivateSubnet:
    Type: String
    Default: Iof the private Subnet
    Description: enter the id of the Private Subnet here
  RouteTable:
    Type: String
    Default: Id of Route Table
    Description: The Route Table that routes may need to be added to.
  SelectedVPC:
    Type: String
    Default: Id of VPC goes here
    Description: The VPC to be deployed to. Will have security groups added to it.
Resources:
  # Subnets for the Default VPC
  LoadSecurityGroup:
    DeletionPolicy: Delete
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows all traffic too and from Load Balancer
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
           - IpProtocol: TCP
             CidrIp: "0.0.0.0/0"
             FromPort: 0
             ToPort: 1023
  FargateSecurityGroup:
    DeletionPolicy: Delete
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows Traffic from Public Subnet. Allows all outbound traffic
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadSecurityGroup
      SecurityGroupEgress:
           - IpProtocol: TCP
             DestinationSecurityGroupId: !Ref LoadSecurityGroup
             FromPort: 0
             ToPort: 1023
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Simple-Fargate
      CapacityProviders:
           - FARGATE
  FargateAuthService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Fargate-Auth-Service
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref FargateAuthTask
      NetworkConfiguration:
           AwsvpcConfiguration:
              SecurityGroups:
                   - !Ref FargateSecurityGroup
              Subnets:
                   - !Ref PrivateSubnet
                
  FargateReflectService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Fargate-Reflect-Service
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref FargateReflectTask
      NetworkConfiguration:
           AwsvpcConfiguration:
              SecurityGroups:
                   - !Ref FargateSecurityGroup
              Subnets:
                   - !Ref PrivateSubnet
  FargateAuthTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
        Tags:
          - Key: test
            Value: True
        NetworkMode: awsvpc
        RequiresCompatibilities:
             - FARGATE
        Memory: 512
        Cpu: 256
        PidMode: task
        ContainerDefinitions:
         - Image: hub.docker.com/repository/docker/gonzaga626/auth:latest
           Name: TestAuth
           Environment:
            - Name: API_PORT
              Value: 80
            - Name: TEST_VAR
              Value: Test variable successfully added.
           PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80
  FargateReflectTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
        Tags:
          - Key: test
            Value: True
        NetworkMode: awsvpc
        RequiresCompatibilities:
             - FARGATE
        Memory: 512
        Cpu: 256
        PidMode: task
        ContainerDefinitions:
         - Image: hub.docker.com/repository/docker/gonzaga626/reflect:latest
           Name: TestAuth
           Environment:
            - Name: API_PORT
              Value: 80
            - Name: TEST_VAR
              Value: Test variable successfully added.
           PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80
