AWSTemplateFormatVersion: "2010-09-09"
Resources:
  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: 'a-test-uniquebucket-randomstringis-38d9c0s'
      # AccessControl: PublicRead
      PublicAccessBlockConfiguration:
           BlockPublicAcls: false
           BlockPublicPolicy: false
           IgnorePublicAcls: false
           RestrictPublicBuckets: false
      OwnershipControls:
           Rules:
            - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  
  SomeS3AccessPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Delete
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::a-test-uniquebucket-randomstringis-38d9c0s/*

  LambdaExecutionRole: # does nothing but write to cloud trail
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambdas can only talk to Cloud Trail. That's it.
      Policies: 
        - PolicyName: root
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "cloudtrail:StartLogging"
                Resource:
                  - "arn:aws:cloudtrail:*"
      RoleName: LambdaExecutionRole

  HelloWorldFunction:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Delete
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Hello World'})
              }

      Handler: index.lambda_handler
      Runtime: python3.8

  AuthFunction:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Delete
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'This is an Auth Request Reply','data': event})
              }

      Handler: index.lambda_handler
      Runtime: python3.8

  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    DeletionPolicy: Delete
    Properties:
      Name: HelloWorldApi

  AuthResource: # For Authentication if not Cognito
    Type: "AWS::ApiGateway::Resource"
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: auth
  
  ApiGatewayAuthMethod:
    Type: "AWS::ApiGateway::Method"
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  HelloResource: # For "Hello World"
    Type: "AWS::ApiGateway::Resource"
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: hello

  ApiGatewayHelloMethod:
    Type: "AWS::ApiGateway::Method"
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref HelloResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

Outputs:
  WebsiteBucketName:
    Value: !Ref WebsiteBucket
  ApiGatewayEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/"